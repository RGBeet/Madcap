
vec4 effect( vec4 colour, Image texture, vec2 texture_coords, vec2 screen_coords )
{
    vec4 tex = Texel(texture, texture_coords);
	vec2 uv = (((texture_coords)*(image_details)) - texture_details.xy*texture_details.ba)/texture_details.ba;

	vec4 hsl = HSL(tex);

	float t = infernal.y*2.221 + time;
	vec2 floored_uv = (floor((uv*texture_details.ba)))/texture_details.ba;
    vec2 uv_scaled_centered = (floored_uv - 0.5) * 50.;

	vec2 field_part1 = uv_scaled_centered + 50.*vec2(sin(-t / 17.0), cos(-t / 13.0));
	vec2 field_part2 = uv_scaled_centered + 50.*vec2(cos( t / 11.0),  cos( t / 9.0));
	vec2 field_part3 = uv_scaled_centered + 50.*vec2(sin(-t / 7.0), sin(-t / 6.0));

    float fire_field = (1.+ (
        cos(length(field_part1) / 8.0) + sin(length(field_part2) / 14.0) * cos(field_part2.y / 8.0) +
        cos(length(field_part3) / 10.0) * sin(field_part3.x / 7.0) ))/2.;

	hsl.x = mix(0.01, 0.12, fire_field); // fire hue: deeper reds to oranges
	hsl.y = mix(hsl.y, 1.0, 0.8); // vivid saturation for flame
	hsl.z = mix(hsl.z, 0.9, fire_field); // brighter with dynamic flame pulse

    tex.rgb = RGB(hsl).rgb;

	// Add more contrast and flicker
	float flicker = sin(t * 12.0 + uv.y * 100.0) * 0.1;
	tex.rgb += flicker;

	// Darken top to simulate charring
	float burn_top = smoothstep(0.0, 0.4, uv.y);
	tex.rgb = mix(vec3(0.03, 0.02, 0.01), tex.rgb, burn_top);

	tex.rgb = clamp(tex.rgb, 0.0, 1.0);

	if (tex[3] < 0.7)
		tex[3] = tex[3]/3.;
	return dissolve_mask(tex * colour, texture_coords, uv);
}
